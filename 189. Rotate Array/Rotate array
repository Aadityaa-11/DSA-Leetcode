class Solution {
public:
    void rotate(vector<int>& nums, int k) {

         int n = nums.size();
        // k = k % n;
        if(n == 0) return;

        while(k>0){

            int temp = nums[n-1];
            for(int i = n-1 ; i> 0 ; i--){
                nums[i] =nums[i-1];
            }

            nums[0] = temp;
            k--;

        }
















        // int n = nums.size();
        // k = k % n;

        // vector<int> temp;
        // for(int i = n - k ; i< n ; i++){
        //     temp.push_back(nums[i]);
        // }
        // // vector<int> temp;
        // //  vector<int> temp(nums.end() - k, nums.end());

        // for(int i = n-1 ; i >= k ; i--){
        //     nums[i] = nums[i-k];
        // }

        // for(int i = 0 ; i< temp.size() ; i++){
        //     nums[i] = temp[i];
        // }



















        // int n = nums.size();
        // vector<int> ans(n);
        
        // for(int index =0; index<n; index++){
        //     int newIndex = (index+k)%n;
        //     ans[newIndex] = nums[index];
        // }
        // nums = ans;

        // int n = nums.size();
        // k = k %n;

        // vector<int> temp; 
        //     for(int i = n-k; i<n; i++) {
        //         temp.push_back(nums[i]);
        //     }

        // for(int i = n-1 ; i>= n/2; i--){
        //     nums[i] = nums[i-k];
        // }

        // for(int i =0; i<temp.size(); i++){
        //     nums[i]= temp[i];
        // }


    //     int n = nums.size();
    // k = k % n; // In case k > n

    // // Step 1: Store last k elements
    // vector<int> temp(nums.end() - k, nums.end());

    // // Step 2: Shift the rest to the right
    // for (int i = n - 1; i >= k; i--) {
    //     nums[i] = nums[i - k];
    // }

    // // Step 3: Copy temp elements to the front
    // for (int i = 0; i < k; i++) {
    //     nums[i] = temp[i];
    // }

    }
};